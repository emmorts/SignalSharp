name: Release and Deploy
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  CI_BUILD: true
  NuGetDirectory: ${{ github.workspace}}/nuget

permissions:
  contents: write
  pages: write
  id-token: write

defaults:
  run:
    shell: bash

jobs:
  pack:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.x' ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: |
            ${{ env.NuGetDirectory }}/*.nupkg
            ${{ env.NuGetDirectory }}/*.snupkg

  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.x' ]
    needs: [ pack ]

    steps:
      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")
        shell: pwsh

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.x' ]
    needs: [ validate ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Run tests
        run: dotnet test --configuration Release
        
  docs:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      matrix:
        dotnet-version: [ '8.x' ]
    needs: [ validate, test ]
    steps:
      - uses: actions/checkout@v4
      - name: Dotnet Setup
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - run: dotnet tool update -g docfx
      - run: docfx ./docs/docfx.json

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/_site'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  release:
    name: Release pushed tag
    runs-on: ubuntu-22.04
    needs: [ docs ]
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo "$GITHUB_REPOSITORY" \
              --title "${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes

  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.x' ]
    needs: [ release ]

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Publish NuGet package
        shell: pwsh
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
